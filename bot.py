import logging
import time
import os
from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from imports import dp, bot
import keyboards as kb
from db import Database
from web_edit.add_rasp import Exel

logging.basicConfig(level=logging.INFO)

db = Database("rs-bot.db", 'users.db')


############################
#       StatesGroup        #
############################
class Edit(StatesGroup):
    eday = State()
    etext = State()


class Admad(StatesGroup):
    ad = State()


class ClassWait(StatesGroup):
    clas = State()
    uch = State()
    chat_clas = State()


class KabWait(StatesGroup):
    kab = State()
    day = State()


class PaswdWait(StatesGroup):
    password = State()


class ExelWait(StatesGroup):
    file = State()
    rasp = State()
    tchr = State()
    kabs = State()


class AdminAdd(StatesGroup):
    id = State()
    name = State()
    uname = State()
    paswd = State()


zero = 0
b_zero = False
clases_list = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10–±", "10–≥", "10—Ñ", "11–±", "11—Å", "11—Ñ"]


@dp.message_handler(commands="start", state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    global zero
    usr = db.user_exists(message.from_user.id)
    if usr is False:
        await message.answer("–í—ã —É –º–µ–Ω—è –≤–ø–µ—Ä–≤—ã–µ!")
        if message.chat.type == 'group':
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º")
        else:
            db.add_user(message.from_user.id, message.from_user.full_name, message.from_user.username, 0, None)
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –°–≤—è—Ç–æ-–î–∏–º–∏—Ç—Ä–∏–µ–≤—Å–∫–æ–π —à–∫–æ–ª—ã.",
                                 reply_markup=kb.clases())
            await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, "
                                 "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø-—É—á–∏—Ç–µ–ª—åüë®‚Äçüè´' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—á–∏—Ç–µ–ª—å—Å–∫–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
                                 reply_markup=kb.uchitel())
            await ClassWait.clas.set()
            print("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
    teachr = db.teacher(message.from_user.id)
    if teachr in range(1, 40):
        await message.answer("üë®‚Äçüè´", reply_markup=kb.get_startkeyboard())
        await message.answer(f"–í—ã —É—á–∏—Ç–µ–ª—å\.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                             f"\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                             f"\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                             reply_markup=kb.uinb(), parse_mode="MarkdownV2")
    elif teachr == 0:
        if db.is_chat(message.chat.id) is True:
            clas = db.chat(message.chat.id)
        else:
            clas = db.what_class(message.from_user.id)
        list_class = [101, 102, 103, 111, 112, 113]
        if clas in list_class:
            clas = int(clas / 10)
        await message.answer("üë®‚Äçüè´", reply_markup=kb.get_startkeyboard())
        await message.answer(f"–í—ã –≤ {clas} –∫–ª–∞—Å—Å–µ\.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                             f"\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                             f"\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                             reply_markup=kb.inboard(), parse_mode="MarkdownV2")
    if message.from_user.id == 900645059:
        await message.answer("üëë–¢—ã –≤ VIP-–∫–µ!", reply_markup=kb.vip_menu())
        print()
        print(f"–í–ª–∞–¥–µ–ª–µ—Ü –≤–æ—à–µ–ª –≤ –ø—Ä–∏–≤–∞—Ç–∫—É!")


@dp.message_handler(commands='stop', state="*")
async def stop(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", reply_markup=kb.rem())


@dp.message_handler(commands="admin")
async def cmd_admin(message: types.Message):
    adm = db.admin_exists(message.from_user.id)
    if adm is True:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
        await PaswdWait.password.set()
    else:
        await message.answer("–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    class1 = db.what_class(message.from_user.id)
    dase = ["üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï", "üìó–í–¢–û–†–ù–ò–öüìó", "üìò–°–†–ï–î–êüìò", "üìô–ß–ï–¢–í–ï–†–ìüìô", "üìî–ü–Ø–¢–ù–ò–¶–êüìî"]
    if class1 != 0:
        try:
            if db.is_chat(message.chat.id) is True:
                class1 = db.chat(message.chat.id)
            else:
                class1 = db.what_class(message.from_user.id)
            if message.text in dase:
                usersmessage = 0
                if message.text == "üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï":
                    usersmessage = class1 + 0.1
                if message.text == "üìó–í–¢–û–†–ù–ò–öüìó":
                    usersmessage = class1 + 0.2
                if message.text == "üìò–°–†–ï–î–êüìò":
                    usersmessage = class1 + 0.3
                if message.text == "üìô–ß–ï–¢–í–ï–†–ìüìô":
                    usersmessage = class1 + 0.4
                if message.text == "üìî–ü–Ø–¢–ù–ò–¶–êüìî":
                    usersmessage = class1 + 0.5
                value = db.day(usersmessage)
                await message.answer(f"{message.text}:\n{value}", reply_markup=kb.get_startkeyboard())
            else:
                if message.text == "üìñ–ù–ê –ù–ï–î–ï–õ–Æüìñ":
                    value = db.week(class1)
                    await message.answer(f"‚úèÔ∏è–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{value[0]}\n\n‚úèÔ∏è–í—Ç–æ—Ä–Ω–∏–∫:\n {value[1]}"
                                         f"\n\n‚úèÔ∏è–°—Ä–µ–¥–∞:\n{value[2]}\n\n‚úèÔ∏è–ß–µ—Ç–≤–µ—Ä–≥:\n{value[3]}"
                                         f"\n\n‚úèÔ∏è–ü—è—Ç–Ω–∏—Ü–∞:\n{value[4]}",
                                         reply_markup=kb.get_startkeyboard())
        except TypeError or ValueError:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.")
            print(message.from_user.id)
    else:
        try:
            if db.is_chat(message.chat.id) is True:
                class1 = int(db.chat(message.chat.id))
            else:
                class1 = int(db.what_class(message.from_user.id))
            if message.text in dase:
                usersmessage = 0
                if message.text == "üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï":
                    usersmessage = class1 + 0.1
                if message.text == "üìó–í–¢–û–†–ù–ò–öüìó":
                    usersmessage = class1 + 0.2
                if message.text == "üìò–°–†–ï–î–êüìò":
                    usersmessage = class1 + 0.3
                if message.text == "üìô–ß–ï–¢–í–ï–†–ìüìô":
                    usersmessage = class1 + 0.4
                if message.text == "üìî–ü–Ø–¢–ù–ò–¶–êüìî":
                    usersmessage = class1 + 0.5
                value = db.teacher_rasp(usersmessage)
                await message.answer(f"{message.text}:\n{value}", reply_markup=kb.get_startkeyboard())
            if message.text == "üìñ–ù–ê –ù–ï–î–ï–õ–Æüìñ":
                clas = class1 + (1 / 10)
                value0 = db.teacher_rasp(clas)
                clas = class1 + (2 / 10)
                value1 = db.teacher_rasp(clas)
                clas = class1 + (3 / 10)
                value2 = db.teacher_rasp(clas)
                clas = class1 + (4 / 10)
                value3 = db.teacher_rasp(clas)
                clas = class1 + (5 / 10)
                value4 = db.teacher_rasp(clas)
                await message.answer(f"‚úèÔ∏è–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{value0}\n\n‚úèÔ∏è–í—Ç–æ—Ä–Ω–∏–∫:\n {value1}\n\n‚úèÔ∏è–°—Ä–µ–¥–∞:\n{value2}"
                                     f"\n\n‚úèÔ∏è–ß–µ—Ç–≤–µ—Ä–≥:\n{value3}\n\n‚úèÔ∏è–ü—è—Ç–Ω–∏—Ü–∞:\n{value4}",
                                     reply_markup=kb.get_startkeyboard())
        except TypeError or ValueError:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.")
            print(message.from_user.id)
    if message.text == "üìö–û–°–û–ë–û–ï –ú–ï–ù–Æüìö":
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ—Å–æ–±–æ–µ –º–µ–Ω—é.", reply_markup=kb.sp_menu())
    if message.text == "üìö–ù–ê –ì–û–îüìö":
        await bot.send_photo(photo=open(f"photos/year.jpg", "rb"), caption="–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥",
                             chat_id=message.from_user.id, reply_markup=kb.get_startkeyboard())
    if message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è":
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=kb.settings())
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å":
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∏—Ç–µ—Å—å.", reply_markup=kb.clases())
        await message.answer("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤—ã —É—á–∏—Ç–µ–ª—å", reply_markup=kb.uchitel())
        await ClassWait.clas.set()
    if message.text == "–º–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏(–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)":
        value = db.count()
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {value}\n–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.",
                             reply_markup=kb.get_startkeyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ callback-–∫–æ–º–∞–Ω–¥—ã
@dp.callback_query_handler(lambda call: call.data, state="*")
async def call_handl(call: types.CallbackQuery, state: FSMContext):
    if call.data == "new_rasp":
        await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx")
        await ExelWait.file.set()
    if call.data == "admin_add":
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ id")
        await AdminAdd.id.set()
    if call.data == "edit":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è.")
        await Edit.eday.set()
        await call.answer()
    if call.data == "ad":
        await bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.')
        await Admad.ad.set()
    if call.data == "uch":
        usersmessage = call.data
        await state.update_data(uch=usersmessage)
        global zero
        db.del_user(call.from_user.id)
        await bot.send_photo(photo=open(f"photos/tchrs.jpg", "rb"), caption="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ",
                             chat_id=call.from_user.id, reply_markup=kb.rem())
        await ClassWait.uch.set()
        await call.answer()
    if call.data == "now":
        try:
            class1 = db.what_class(call.from_user.id)
            if class1 != 0:
                if db.is_chat(call.message.chat.id) is True:
                    class1 = db.chat(call.message.chat.id)
                else:
                    class1 = db.what_class(call.from_user.id)
                day = time.localtime()
                day = day.tm_wday + 1
                if day < 6:
                    clas = class1 + (day / 10)
                    value = db.day(clas)
                    await call.message.answer(f"{value}")
                else:
                    await call.message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!")
                await call.answer()
            else:
                day = time.localtime()
                day = day.tm_wday + 1
                if day < 6:
                    if db.is_chat(call.message.chat.id) is True:
                        class1 = db.chat(call.message.chat.id)
                    else:
                        class1 = db.what_class(call.from_user.id)
                    clas = class1 + (day / 10)
                    value = db.teacher_rasp(clas)
                    await call.message.answer(f"{value}")
                else:
                    await call.message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!")
                await call.answer()
        except TypeError or ValueError:
            await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.")
            print(call.from_user.id)
    if call.data == "tom":
        try:
            class1 = db.what_class(call.from_user.id)
            if class1 != 0:
                if db.is_chat(call.message.chat.id) is True:
                    class1 = db.chat(call.message.chat.id)
                else:
                    class1 = db.what_class(call.from_user.id)
                day = time.localtime()
                day = day.tm_wday + 2
                userbase = [6, 7]
                if day < 6:
                    clas = class1 + (day / 10)
                    value = db.day(clas)
                    await call.message.answer(f"{value}")
                elif day == 8:
                    clas = class1 + 0.1
                    value = db.day(clas)
                    await call.message.answer(f"{value}")
                elif day in userbase:
                    await call.message.answer("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π!\n–£—Ä–∞!")
                await call.answer()
            else:
                day = time.localtime()
                day = day.tm_wday + 2
                userbase = [6, 7]
                clas1 = db.teacher(call.from_user.id)
                if day < 6:
                    clas = clas1 + (day / 10)
                    value = db.teacher_rasp(clas)
                    await call.message.answer(f"{value}")
                elif day == 8:
                    clas = clas1 + 0.1
                    value = db.teacher_rasp(clas)
                    await call.message.answer(f"{value}")
                elif day in userbase:
                    await call.message.answer("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π!\n–£—Ä–∞!")
                await call.answer()
        except TypeError or ValueError:
            await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.")
            print(call.from_user.id)
    if call.data == "kab":
        await bot.send_photo(photo=open(f"photos/kabs.jpg", "rb"), caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ",
                             chat_id=call.from_user.id)
        await KabWait.kab.set()


@dp.message_handler(state=ClassWait.clas)
async def classadd(message: types.Message, state: FSMContext):
    class_list = ["10–±", "10–≥", "10—Ñ", "11–±", "11—Å", "11—Ñ"]
    if message.text == "/start":
        await state.finish()
    else:
        usersmessage = message.text
        if usersmessage in class_list:
            if usersmessage == "10–±":
                usersmessage = "101"
            if usersmessage == "10–≥":
                usersmessage = "102"
            if usersmessage == "10—Ñ":
                usersmessage = "103"
            if usersmessage == "11–±":
                usersmessage = "111"
            if usersmessage == "11—Å":
                usersmessage = "112"
            if usersmessage == "11—Ñ":
                usersmessage = "113"
        await state.update_data(clas=usersmessage)
        await state.finish()
        msg = int(usersmessage)
        db.del_user(message.from_user.id)
        db.add_user(message.from_user.id, message.from_user.first_name, message.from_user.username, msg, 0)
        await message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å –≤ –º–µ–Ω—é "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è" –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                             reply_markup=kb.get_startkeyboard())
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                             "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                             "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                             reply_markup=kb.inboard(), parse_mode="MarkdownV2")


@dp.message_handler(state=ClassWait.uch)
async def uch(message: types.Message, state: FSMContext):
    if message.text == "/start" or message.text == "/stop":
        await state.finish()
    else:
        usersmessage = message.text
        msg = int(usersmessage)
        db.del_user(message.from_user.id)
        db.add_user(message.from_user.id, message.from_user.first_name, message.from_user.username, 0, msg)
        await state.update_data(uch=usersmessage)
        await state.finish()
        await message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–Ω—é "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è" –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                             reply_markup=kb.get_startkeyboard())
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                             "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                             "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                             reply_markup=kb.uinb(), parse_mode="MarkdownV2")


@dp.message_handler(state=Edit.eday)
async def textadd(message: types.Message, state: FSMContext):
    usersmessage = float(message.text)
    await state.update_data(eday=usersmessage)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    await Edit.etext.set()


@dp.message_handler(state=KabWait.kab)
async def take_kab(message: types.Message, state: FSMContext):
    usersmessage = int(message.text)
    await state.update_data(kab=usersmessage)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=kb.get_startkeyboard())
    await KabWait.day.set()


@dp.message_handler(state=KabWait.day)
async def get_kab_rasp(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    dase = ["üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï", "üìó–í–¢–û–†–ù–ò–öüìó", "üìò–°–†–ï–î–êüìò", "üìô–ß–ï–¢–í–ï–†–ìüìô", "üìî–ü–Ø–¢–ù–ò–¶–êüìî"]
    if message.text in dase:
        usersmessage = message.text
        if usersmessage == "üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï":
            usersmessage = 0.1
        if usersmessage == "üìó–í–¢–û–†–ù–ò–öüìó":
            usersmessage = 0.2
        if usersmessage == "üìò–°–†–ï–î–êüìò":
            usersmessage = 0.3
        if usersmessage == "üìô–ß–ï–¢–í–ï–†–ìüìô":
            usersmessage = 0.4
        if usersmessage == "üìî–ü–Ø–¢–ù–ò–¶–êüìî":
            usersmessage = 0.5
        await state.finish()

        kab1 = user_data['kab']
        id_day = kab1 + usersmessage
        value = db.kab(id_day)
        await message.answer(value)
    else:
        await state.finish()


# @dp.message_handler(state=Edit.etext)
# async def textadd2(message: types.Message, state: FSMContext):
# usersmessage = message.text
#  c
# day = user_data['eday']
# await state.finish()
# cursor.execute(f"SELECT * FROM rasp WHERE class = {day}")
#  rs = cursor.fetchone()
#  if not rs:
#     cursor.execute("INSERT INTO rasp values (:class, :rasp);", {
#         'class': day,
#         'rasp': usersmessage})
#      conn.commit()
# else:
#      cursor.execute(f"UPDATE rasp SET rasp = {usersmessage} WHERE class = ?", (day,))
#  await message.answer("Done!")


@dp.message_handler(state=Admad.ad)
async def getcount(message: types.Message, state: FSMContext):
    ad = message.text
    await state.update_data(ad=ad)
    await state.finish()
    userbase = db.ad()
    if len(userbase) > 1:
        for z in range(len(userbase)):
            await bot.send_message(userbase[z][0], text=f"–í–Ω–∏–º–∞–Ω–∏–µ!\n{ad}")
    else:
        await bot.send_message(userbase[0], f"–í–Ω–∏–º–∞–Ω–∏–µ!\n{ad}")
    await bot.send_message(message.chat.id, text='Done!')


@dp.message_handler(state=AdminAdd.id)
async def admin_id(message: types.Message, state: FSMContext):
    usersmessage = int(message.text)
    await state.update_data(id=usersmessage)
    await message.answer("–ò–º—è")
    await AdminAdd.name.set()


@dp.message_handler(state=AdminAdd.name)
async def admin_name(message: types.Message, state: FSMContext):
    usersmessage = message.text
    await state.update_data(name=usersmessage)
    await message.answer("–Æ–∑–µ—Ä–Ω–µ–π–º, –∏–ª–∏ None")
    await AdminAdd.uname.set()


@dp.message_handler(state=AdminAdd.uname)
async def admin_uname(message: types.Message, state: FSMContext):
    usersmessage = message.text
    await state.update_data(uname=usersmessage)
    await message.answer("–ü–∞—Ä–æ–ª—å")
    await AdminAdd.paswd.set()


@dp.message_handler(state=AdminAdd.paswd)
async def admin_pswd_set(message: types.Message, state: FSMContext):
    usersmessage = message.text
    await state.update_data(paswd=usersmessage)
    user_data = await state.get_data()
    await state.finish()
    db.add_admin(user_data['id'], user_data['name'], user_data['uname'], user_data['paswd'])
    await message.answer("Done!", reply_markup=kb.get_startkeyboard())


@dp.message_handler(state=PaswdWait.password)
async def admin_pswd(message: types.Message, state: FSMContext):
    usersmessage = message.text
    await state.update_data(password=usersmessage)
    await state.finish()
    psword = db.admin(message.from_user.id)
    if psword == usersmessage:
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É", reply_markup=kb.admin_menu())
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ!", reply_markup=kb.get_startkeyboard())


@dp.message_handler(state="*", content_types=['document'])
async def admin_file(message: types.Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    name = f"{message.document.file_id}.xlsx"
    dest = f"{prj_dir}/xl_uploads/{name}"
    await state.update_data(file=name)
    db.delall()
    await message.document.download(destination_file=dest)
    await message.answer("–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏."
                         "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª–∞—Å—Å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á–∏—Å–ª–æ1,"
                         "—á–∏—Å–ª–æ2")
    await ExelWait.rasp.set()


@dp.message_handler(state=ExelWait.rasp)
async def admin_rasp(message: types.Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    usersmessage = message.text.split(',')
    data = await state.get_data()
    xl = Exel(data['file'], prj_dir)
    xl.rasp(int(usersmessage[0]), int(usersmessage[1]))
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª–µ–π, –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∏—Ç–µ–ª—å—Å–∫–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, "
                         "–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,—á–∏—Å–ª–æ1,—á–∏—Å–ª–æ2")
    await ExelWait.tchr.set()


@dp.message_handler(state=ExelWait.tchr)
async def admin_rasp(message: types.Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    usersmessage = message.text.split(',')
    data = await state.get_data()
    xl = Exel(data['file'], prj_dir)
    xl.tchr_rasp(int(usersmessage[0]), int(usersmessage[1]), int(usersmessage[2]))
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º, "
                         "–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,—á–∏—Å–ª–æ1,—á–∏—Å–ª–æ2")
    await ExelWait.kabs.set()


@dp.message_handler(state=ExelWait.kabs)
async def admin_kab(message: types.Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    usersmessage = message.text.split(',')
    data = await state.get_data()
    xl = Exel(data['file'], prj_dir)
    xl.kab(int(usersmessage[0]), int(usersmessage[1]), int(usersmessage[2]))
    await message.answer("–ì–æ—Ç–æ–≤–æ!\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É,–∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –±–æ—Ç–∞.")
    await state.finish()


@dp.inline_handler()
async def inline(query: types.InlineQuery):
    if query.query in clases_list:
        usersmessage = query.query
        if usersmessage == "10–±":
            usersmessage = "101"
        if usersmessage == "10–≥":
            usersmessage = "102"
        if usersmessage == "10—Ñ":
            usersmessage = "103"
        if usersmessage == "11–±":
            usersmessage = "111"
        if usersmessage == "11—Å":
            usersmessage = "112"
        if usersmessage == "11—Ñ":
            usersmessage = "113"
        await query.answer(kb.inline_kb(usersmessage), cache_time=1, is_personal=True,
                           switch_pm_text="–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ª–∏—á–Ω–æ ¬ª¬ª", switch_pm_parameter="ls")
    else:
        us = db.user_exists(query.from_user.id)
        if us is True:
            uh = db.teacher(query.from_user.id)
            cls = db.what_class(query.from_user.id)
            if cls != 0:
                await query.answer(kb.inline_kb(cls), cache_time=1, is_personal=True,
                                   switch_pm_text="–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ª–∏—á–Ω–æ ¬ª¬ª", switch_pm_parameter="ls")
            else:
                await query.answer(kb.inline_kb(clas=None, uch=uh), cache_time=1, is_personal=True,
                                   switch_pm_text="–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ª–∏—á–Ω–æ ¬ª¬ª", switch_pm_parameter="ls")
        else:
            buttons = [
                types.InlineQueryResultArticle(id="err", title="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                                               description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—à–µ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å",
                                               input_message_content=types.InputTextMessageContent("–û—à–∏–±–∫–∞!"
                                                                                                   "\n–í—ã –Ω–µ "
                                                                                                   "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. "
                                                                                                   "\n"
                                                                                                   "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å "
                                                                                                   "–≤ –ª—Å –±–æ—Ç–∞."))]
            await query.answer(buttons, cache_time=1, switch_pm_parameter="new", switch_pm_text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ¬ª¬ª")


@dp.message_handler(content_types=['new_chat_members'])
async def send_welcome(message: types.Message):
    bot_obj = await bot.get_me()
    bot_id = bot_obj.id

    for chat_member in message.new_chat_members:
        if chat_member.id == bot_id:
            await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=kb.clases())
            await ClassWait.chat_clas.set()


@dp.message_handler(state=ClassWait.chat_clas)
async def chat_class(message: types.Message, state: FSMContext):
    id1 = message.chat.id
    usersmessage = message.text
    class_list = ["10–±", "10–≥", "10—Ñ", "11–±", "11—Å", "11—Ñ"]
    if usersmessage in class_list:
        if usersmessage == "10–±":
            usersmessage = "101"
        if usersmessage == "10–≥":
            usersmessage = "102"
        if usersmessage == "10—Ñ":
            usersmessage = "103"
        if usersmessage == "11–±":
            usersmessage = "111"
        if usersmessage == "11—Å":
            usersmessage = "112"
        if usersmessage == "11—Ñ":
            usersmessage = "113"
        db.add_chat(id1, usersmessage)
    await message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –≤ –º–µ–Ω—é "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è" –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                         reply_markup=kb.get_startkeyboard())
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                         "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                         "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                         reply_markup=kb.inboard(), parse_mode="MarkdownV2")
    await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
