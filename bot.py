import sqlite3
import logging
import time
from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from imports import dp, bot
import keyboards as kb

logging.basicConfig(level=logging.INFO)


############################
#       StatesGroup        #
############################
class Edit(StatesGroup):
    eday = State()
    etext = State()


class Admad(StatesGroup):
    ad = State()


class ClassWait(StatesGroup):
    clas = State()
    napr = State()


#############################
#          SQLite           #
#############################
with sqlite3.connect("rs-bot.db") as conn:
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users0
    (id INTEGER, name VARCHAR, uname VARCHAR, class INTEGER, teacher BOOLEAN)
    """)

with sqlite3.connect("rs-bot.db") as conn:
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS uchitel_rasp
    (id_day INTEGER, rasp VARCHAR)
    """)

with sqlite3.connect("rs-bot.db") as conn:
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS rasp
    (class INTEGER, rasp VARCHAR)
    """)

zero = 0
b_zero = False


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    global zero
    cursor.execute(f"select * from users0 where id = {message.from_user.id}")
    usr = cursor.fetchone()
    if not usr:
        cursor.execute("INSERT INTO users0 values (:id, :name, :uname, :class, :teacher);",
                       {'id': message.from_user.id,
                        'name': message.from_user.first_name,
                        'uname': message.from_user.username,
                        'class': zero,
                        'teacher': None})
        conn.commit()
        await message.answer("–í—ã —É –º–µ–Ω—è –≤–ø–µ—Ä–≤—ã–µ!")
    cursor.execute(f"select teacher from users0 where id = {message.from_user.id}")
    teachr = cursor.fetchone()[0]
    if teachr is None:
        await message.answer("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ!\n\n–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –°–≤—è—Ç–æ-–î–∏–º–∏—Ç—Ä–∏–µ–≤—Å–∫–æ–π —à–∫–æ–ª—ã.",
                             reply_markup=kb.clases())
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, "
                             "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø-—É—á–∏—Ç–µ–ª—åüë®‚Äçüè´' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—á–∏—Ç–µ–ª—å—Å–∫–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
                             reply_markup=kb.uchitel())
        await ClassWait.clas.set()
    else:
        if teachr == True:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ!\n–£ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π."
                                 "\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–π–∫–µ —ç—Ç–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞, —Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –µ–≥–æ "
                                 "–Ω–∞ –ø–æ—á—Ç—É ag15@ag15.ru "
                                 "\n\n–ü–æ–∫–∞ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤.",
                                 reply_markup=kb.get_startkeyboard())
        else:
            cursor.execute(f"select class from users0 where id = {message.from_user.id}")
            clas = cursor.fetchone()[0]
            if clas == 101 or clas == 102 or clas == 103 or clas == 111 or clas == 112 or clas == 113:
                clas = int(clas / 10)
            await message.answer("üë®‚Äçüè´", reply_markup=kb.get_startkeyboard())
            await message.answer(f"–í—ã –≤ {clas} –∫–ª–∞—Å—Å–µ\.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                                 f"\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                                 f"\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                                 reply_markup=kb.inboard(), parse_mode="MarkdownV2")
    if message.from_user.id == 900645059:
        await message.answer("üëë–¢—ã –≤ VIP-–∫–µ!", reply_markup=kb.vip_menu())
        print()
        print(f"–í–ª–∞–¥–µ–ª–µ—Ü –≤–æ—à–µ–ª –≤ –ø—Ä–∏–≤–∞—Ç–∫—É!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.text == "üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï":
        class1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        clas1 = int(class1)
        clas = clas1 + 0.1
        value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        await message.answer(f"üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï:\n{value}", reply_markup=kb.get_startkeyboard())
    if message.text == "üìó–í–¢–û–†–ù–ò–öüìó":
        clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        clas = clas1 + 0.2
        value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        await message.answer(f"üìó–í–¢–û–†–ù–ò–öüìó:\n{value}", reply_markup=kb.get_startkeyboard())
    if message.text == "üìò–°–†–ï–î–êüìò":
        clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        clas = clas1 + 0.3
        value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        await message.answer(f"üìò–°–†–ï–î–êüìò:\n{value}", reply_markup=kb.get_startkeyboard())
    if message.text == "üìô–ß–ï–¢–í–ï–†–ìüìô":
        clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        clas = clas1 + 0.4
        value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        await message.answer(f"üìô–ß–ï–¢–í–ï–†–ìüìô:\n{value}", reply_markup=kb.get_startkeyboard())
    if message.text == "üìî–ü–Ø–¢–ù–ò–¶–êüìî":
        clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        clas = clas1 + 0.5
        value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        await message.answer(f"üìî–ü–Ø–¢–ù–ò–¶–êüìî:\n{value}", reply_markup=kb.get_startkeyboard())
    if message.text == "üìö–û–°–û–ë–û–ï –ú–ï–ù–Æüìö":
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ—Å–æ–±–æ–µ –º–µ–Ω—é.", reply_markup=kb.sp_menu())
    if message.text == "üìö–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ì–û–îüìö":
        # value = cursor.execute("SELECT rasp FROM rasp WHERE class = 1").fetchone()[0]
        await message.answer("–†–µ–∂–∏–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=kb.get_startkeyboard())
    if message.text == "üìñ–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æüìñ":
        clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (message.from_user.id,)).fetchone()[0]
        clas = clas1 + (1 / 10)
        value0 = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        clas = clas1 + (2 / 10)
        value1 = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        clas = clas1 + (3 / 10)
        value2 = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        clas = clas1 + (4 / 10)
        value3 = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        clas = clas1 + (5 / 10)
        value4 = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
        await message.answer(f"‚úèÔ∏è–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{value0}\n\n‚úèÔ∏è–í—Ç–æ—Ä–Ω–∏–∫:\n {value1}\n\n‚úèÔ∏è–°—Ä–µ–¥–∞:\n{value2}"
                             f"\n\n‚úèÔ∏è–ß–µ—Ç–≤–µ—Ä–≥:\n{value3}\n\n‚úèÔ∏è–ü—è—Ç–Ω–∏—Ü–∞:\n{value4}", reply_markup=kb.get_startkeyboard())
    if message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è":
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=kb.settings())
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å":
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∏—Ç–µ—Å—å.", reply_markup=kb.clases())
        await message.answer("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤—ã —É—á–∏—Ç–µ–ª—å", reply_markup=kb.uchitel())
        await ClassWait.clas.set()
    if message.text == "–º–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏(–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)":
        value = cursor.execute('SELECT Count(*) FROM users0').fetchone()[0]
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {value}\n–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.",
                             reply_markup=kb.get_startkeyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ callback-–∫–æ–º–∞–Ω–¥—ã
@dp.callback_query_handler(lambda call: call.data, state="*")
async def call_handl(call: types.CallbackQuery, state: FSMContext):
    if call.data == "edit":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è.")
        await Edit.eday.set()
    if call.data == "all_bots":
        await call.message.answer("–í–æ—Ç –≤—Å–µ –Ω–∞—à–∏ –±–æ—Ç—ã:", reply_markup=kb.bots_list())
    if call.data == "ad":
        await bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.')
        await Admad.ad.set()
    if call.data == "uch":
        usersmessage = call.data
        await state.update_data(uch=usersmessage)
        global zero
        await state.finish()
        cursor.execute("DELETE from users0 where id = ?", (call.from_user.id,))
        cursor.execute("INSERT INTO users0 values (:id, :name, :uname, :class, :teacher);",
                       {'id': call.from_user.id,
                        'name': call.from_user.first_name,
                        'uname': call.from_user.username,
                        'class': zero,
                        'teacher': True})
        conn.commit()
        await call.message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤ –º–µ–Ω—é "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è" –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                                  reply_markup=kb.get_startkeyboard())
        await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                                  "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é, –∏ –¥–∞–∂–µ –Ω–∞ –≥–æ–¥ –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                                  "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                                  reply_markup=kb.inboard(), parse_mode="MarkdownV2")
    if call.data == "now":
        day = time.localtime()
        day = day.tm_wday + 1
        if day < 6:
            clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (call.from_user.id,)).fetchone()[0]
            clas = clas1 + (day / 10)
            value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
            await call.message.answer(f"{value}")
        else:
            await call.message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!")
    if call.data == "tom":
        day = time.localtime()
        day = day.tm_wday + 2
        userbase = [6, 7]
        if day < 6:
            clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (call.from_user.id,)).fetchone()[0]
            clas = clas1 + (day / 10)
            value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
            await call.message.answer(f"{value}")
        if day == 8:
            clas1 = cursor.execute("SELECT class FROM users0 WHERE id = ?", (call.from_user.id,)).fetchone()[0]
            clas = clas1 + 0.1
            value = cursor.execute("SELECT rasp FROM rasp WHERE class = ?", (clas,)).fetchone()[0]
            await call.message.answer(f"{value}")
        if day in userbase:
            await call.message.answer("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π!\n–£—Ä–∞!")


@dp.message_handler(state=ClassWait.clas)
async def classadd(message: types.Message, state: FSMContext):
    class_list = ["10–±", "10–≥", "10—Ñ", "11–±", "11—Å", "11—Ñ"]
    if message.text == "/start":
        await state.finish()
    else:
        usersmessage = message.text
        if usersmessage in class_list:
            if usersmessage == "10–±":
                usersmessage = "101"
            if usersmessage == "10–≥":
                usersmessage = "102"
            if usersmessage == "10—Ñ":
                usersmessage = "103"
            if usersmessage == "11–±":
                usersmessage = "101"
            if usersmessage == "11—Å":
                usersmessage = "102"
            if usersmessage == "11—Ñ":
                usersmessage = "103"
        await state.update_data(clas=usersmessage)
        await state.finish()
        msg = int(usersmessage)
        cursor.execute("DELETE from users0 where id = ?", (message.from_user.id,))
        cursor.execute("INSERT INTO users0 values (:id, :name, :uname, :class, :teacher);",
                       {'id': message.from_user.id,
                        'name': message.from_user.first_name,
                        'uname': message.from_user.username,
                        'class': msg,
                        'teacher': False})
        conn.commit()
        await message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å –≤ –º–µ–Ω—é "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è" –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                             reply_markup=kb.get_startkeyboard())
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                             "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                             "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                             reply_markup=kb.inboard(), parse_mode="MarkdownV2")


@dp.message_handler(state=Edit.eday)
async def textadd(message: types.Message, state: FSMContext):
    usersmessage = float(message.text)
    await state.update_data(eday=usersmessage)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    await Edit.etext.set()


@dp.message_handler(state=Edit.etext)
async def textadd2(message: types.Message, state: FSMContext):
    usersmessage = message.text
    await state.update_data(etext=usersmessage)
    user_data = await state.get_data()
    day = user_data['eday']
    await state.finish()
    cursor.execute(f"SELECT * FROM rasp WHERE class = {day}")
    rs = cursor.fetchone()
    if not rs:
        cursor.execute("INSERT INTO rasp values (:class, :rasp);", {
            'class': day,
            'rasp': usersmessage})
        conn.commit()
    else:
        cursor.execute(f"UPDATE rasp SET rasp = {usersmessage} WHERE class = ?", (day,))
    await message.answer("Done!")


@dp.message_handler(state=Admad.ad)
async def getcount(message: types.Message, state: FSMContext):
    ad = message.text
    await state.update_data(ad=ad)
    await state.finish()
    cursor.execute("SELECT id FROM users0")
    userbase = []
    while True:
        row = cursor.fetchone()
        if row is None:
            break
        userbase.append(row)
    if len(userbase) > 1:
        for z in range(len(userbase)):
            await bot.send_message(userbase[z][0], text=f"–í–Ω–∏–º–∞–Ω–∏–µ!\n{ad}")
    else:
        await bot.send_message(userbase[0], f"–í–Ω–∏–º–∞–Ω–∏–µ!\n{ad}")
    await bot.send_message(message.chat.id, text='Done!')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
