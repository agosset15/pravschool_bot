import ast
from aiogram import types, html
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, \
    InlineKeyboardMarkup, ReplyKeyboardBuilder
from ...db.methods.get import get_schedule, get_teacher_schedule
from ...db import Student
from ..config import ns
from netschoolapi.errors import SchoolNotFoundError, AuthError


def get_startkeyboard() -> types.ReplyKeyboardMarkup:
    buttons = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–û–°–û–ë–û–ï –ú–ï–ù–Æ"]
    kb = ReplyKeyboardBuilder()
    for i in buttons:
        kb.button(text=i)
    kb.adjust(3)
    return kb.as_markup(resize_keyboard=True, input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")


def days_inline() -> types.InlineKeyboardMarkup:
    buttons = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê"]
    kb = InlineKeyboardBuilder()
    kb.button(text=buttons[0], callback_data='mon')
    kb.button(text=buttons[1], callback_data='tue')
    kb.button(text=buttons[2], callback_data='wed')
    kb.button(text=buttons[3], callback_data='thu')
    kb.button(text=buttons[4], callback_data='fri')
    kb.button(text='–ù–∞–∑–∞–¥', callback_data="back")
    kb.adjust(1)
    return kb.as_markup()


def inline_kb(clas: int | None, uch: int = None):
    if clas is not None:
        arr = []
        for i in range(1, 6):
            arr.append('\n'.join(ast.literal_eval(get_schedule(clas, i))))

    else:
        arr = []
        for i in range(1, 6):
            arr.append('\n'.join(ast.literal_eval(get_teacher_schedule(uch, i))))
    buttons = [
        types.InlineQueryResultArticle(id="1", title="–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[0])),
        types.InlineQueryResultArticle(id="2", title="–í–¢–û–†–ù–ò–ö",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[1])),
        types.InlineQueryResultArticle(id="3", title="–°–†–ï–î–ê",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[2])),
        types.InlineQueryResultArticle(id="4", title="–ß–ï–¢–í–ï–†–ì",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[3])),
        types.InlineQueryResultArticle(id="5", title="–ü–Ø–¢–ù–ò–¶–ê",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[4]))
    ]
    return buttons


async def inline_ns_kb(usr: Student):
    arr = []
    try:
        await ns.login(usr.login, usr.password, '–°–≤—è—Ç–æ-–î–∏–º–∏—Ç—Ä–∏–µ–≤—Å–∫–∞—è —à–∫–æ–ª–∞')
        diary = await ns.diary()
        await ns.logout()
        await ns.logout()
        await ns.logout()
        day = diary.schedule
    except SchoolNotFoundError or AuthError:
        await ns.logout()
        err = [types.InlineQueryResultArticle(id="err", title="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.",
                                              description="–ò–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –õ–°. –ö–Ω–æ–ø–∫–∞ –≤—ã—à–µ.")]
        return err
    for da in day:
        lesson = da.lessons
        message_text = []
        for less in lesson:
            assig = less.assignments
            if assig:
                for i in assig:
                    if i.mark is None:
                        if i.is_duty is True:
                            message_text.append(
                                f"‚ö†Ô∏è–î–û–õ–ì!\n{html.bold(i.type)}({less.subject})\n{i.content}")
                        else:
                            message_text.append(f"{html.bold(i.type)}({less.subject})\n{i.content}")
                    else:
                        message_text.append(
                            f"{html.bold(i.type)}({less.subject})\n{i.content} -- {html.bold(i.mark)}")
            else:
                message_text.append(f"{html.bold(less.subject)}\n–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
        msg = "\n\n".join(message_text)
        arr.append(msg)

    buttons = [
        types.InlineQueryResultArticle(id="1", title="–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[0],
                                                                                           parse_mode='HTML')),
        types.InlineQueryResultArticle(id="2", title="–í–¢–û–†–ù–ò–ö",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[1],
                                                                                           parse_mode='HTML')),
        types.InlineQueryResultArticle(id="3", title="–°–†–ï–î–ê",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[2],
                                                                                           parse_mode='HTML')),
        types.InlineQueryResultArticle(id="4", title="–ß–ï–¢–í–ï–†–ì",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[3],
                                                                                           parse_mode='HTML')),
        types.InlineQueryResultArticle(id="5", title="–ü–Ø–¢–ù–ò–¶–ê",
                                       input_message_content=types.InputTextMessageContent(message_text=arr[4],
                                                                                           parse_mode='HTML'))
    ]
    return buttons


def vip_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="new_rasp")
    kb.button(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photo_add")
    kb.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")
    kb.button(text="–°–≤–æ–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_check")
    kb.button(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="del_user")
    kb.button(text="–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="ad")
    kb.adjust(1)
    return kb.as_markup()


def sqlite_upd():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", callback_data="sql_upd")
    kb.adjust(1)
    return kb.as_markup()


def uinb():
    buttons = [
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="now")],
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tom")],
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º", callback_data="kab")],
        [
            InlineKeyboardButton(text="–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="week"),
            InlineKeyboardButton(text="–ù–∞ –≥–æ–¥", callback_data="year"),
            InlineKeyboardButton(text="–≠–ñ", callback_data="ns"),
            InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="homework")],
        [InlineKeyboardButton(text="–í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                              web_app=types.WebAppInfo(url='https://tg.ag15.ru/demo?nextpage=1'))]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def uchitel():
    kb = InlineKeyboardBuilder()
    kb.button(text="–Ø-—É—á–∏—Ç–µ–ª—åüë®‚Äçüè´", callback_data="uch")
    return kb.as_markup()


def settings():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å", callback_data="change_class")
    keyboard.button(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –≠–ñ", callback_data="add_ns")
    keyboard.button(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data="info")
    keyboard.button(text="–£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è", callback_data="delete")
    keyboard.button(text="–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data='wanttobeadmin')
    keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)


def ns_settings():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å", callback_data="change_ns")
    keyboard.button(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="add_ns_upd")
    keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)


def clases():
    kb = ReplyKeyboardBuilder()
    buttons = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10–±", "10–≥", "10—Ñ", "11–±", "11—Å", "11—Ñ"]
    for i in buttons:
        kb.button(text=i)
    return kb.as_markup(resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å")


def rasp_kb(arr: list):
    kb = InlineKeyboardBuilder()
    for i in range(1, len(arr) + 1):
        kb.button(text=arr[i - 1], callback_data=f"{i}")
    kb.adjust(1)
    return kb.as_markup()


def admin_kb(day):
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data=f'{day}_edit_homework')
    kb.button(text="–ù–∞–∑–∞–¥", callback_data='back')
    kb.adjust(1)
    return kb.as_markup()


def back():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥", callback_data='back')
    kb.adjust(1)
    return kb.as_markup()


def make_ns():
    buttons = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê"]
    buttons = [
        [InlineKeyboardButton(text=buttons[0], callback_data='0')],
        [InlineKeyboardButton(text=buttons[1], callback_data='1')],
        [InlineKeyboardButton(text=buttons[2], callback_data='2')],
        [InlineKeyboardButton(text=buttons[3], callback_data='3')],
        [InlineKeyboardButton(text=buttons[4], callback_data='4')],
        [
            InlineKeyboardButton(text="<< –ù–µ–¥–µ–ª—è", callback_data="back_week"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è >>", callback_data="next_week")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def extract_unique_code(text):
    return text.split()[1] if len(text.split()) > 1 else None


def rem():
    remq = types.ReplyKeyboardRemove()
    return remq
