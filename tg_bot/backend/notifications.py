import requests
import os
import json
import datetime
from typing import Optional
from db import Student
from ..config import bot, send_greeting, ns
from db.methods.get import get_students_with_duty_notification, get_students_with_greet_notification


async def get_duty(student: Student, student_id: Optional[int] = None) -> str:
    try:
        await ns.login(student.login, student.password, 1)
        ass = await ns.overdue(student_id=student_id)
        if ass is not None:
            arr = []
            for i in ass:
                asss = await ns.assignment_info(i.id, student_id)
                arr.append(f"{i.type} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {asss.subjectGroup.name.split('/')[1]}:\n{asss.name}")
            text = "\n\n".join(arr)
            text = f"–í–æ—Ç –≤–∞—à–∏ –¥–æ–ª–≥–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:\n\n{text}"
        else:
            text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç!"
        await ns.logout()
        await ns.logout()
        await ns.logout()
        return text
    except SchoolNotFoundError or AuthError or NoResponseFromServer:
        await ns.logout()
        return None


async def send_user_ns_duty():
    ids = get_students_with_duty_notification()
    for z in ids:
        await bot.send_message(z.tgid, )


async def send_greet():
    morning = datetime.datetime.now().hour < 14
    req = requests.get(f"https://api.weather.yandex.ru/v2/informers?lat=55.723377&lon=37.600595&lang=ru_RU",
                       headers={"X-Yandex-API-Key": os.getenv('WEATHER_TOKEN')})
    forecast = json.loads(req.json())
    ass_t = {"clear": '—è—Å–Ω–æ', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
             'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', 'rain': '–¥–æ–∂–¥—å', 'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
             'showers': '–ª–∏–≤–µ–Ω—å', 'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 'snow': '—Å–Ω–µ–≥',
             'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥', 'hail': '–≥—Ä–∞–¥', 'thunderstorm': '–≥—Ä–æ–∑–∞',
             'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º.'}
    if morning:
        text = (f"üèô–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞!\n\n–°–µ–≥–æ–¥–Ω—è –Ω–∞ —É–ª–∏—Ü–µ {forecast.fact.temp}({forecast.fact.feels_like})¬∞C, "
                f"{ass_t[forecast.fact.condition]}.\n\n")
    else:
        text = (f"üåÉ–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞!\n\n–ó–∞–≤—Ç—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ {forecast.forecast.parts[1].temp_avg}("
                f"{forecast.forecast.parts[1].feels_like})¬∞C, {ass_t[forecast.forecast.parts[1].condition]}.\n\n")
    for s in get_students_with_greet_notification():
        text = text + await get_duty(s)
        await bot.send_message(student.tgid, text)
