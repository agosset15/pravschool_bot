from datetime import datetime, timedelta
import os
import ast
from aiogram import Router, F, html
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramNotFound
from netschoolapi.errors import SchoolNotFoundError, AuthError

from ..backend.add_rasp import Exel
from db.methods.update import (edit_student_clas, switch_student_admin, edit_student_login, edit_student_password,
                               edit_homework, edit_homework_upd_date, switch_student_ns, switch_student_teasher_false,
                               switch_student_teasher_true, update_student_blocked, update_student_nonblocked)
from db.methods.create import create_homework
from db.methods.get import get_kab_schedule, get_all_students, get_student_by_telegram_id, get_homework
from db.methods.delete import delete_schedules, delete_student
from ..keyboards import keyboards as kb
from ..config import *

router = Router()

days = ["üìï–ü–û–ù–ï–î–ï–õ–¨–ù–ò–öüìï", "üìó–í–¢–û–†–ù–ò–öüìó", "üìò–°–†–ï–î–êüìò", "üìô–ß–ï–¢–í–ï–†–ìüìô", "üìî–ü–Ø–¢–ù–ò–¶–êüìî"]


@router.message(ClassWait.clas)
async def classadd(message: Message, state: FSMContext):
    class_list = ["10–±", "10–≥", "10—Ñ", "11–±", "11—Å", "11—Ñ"]
    list1 = {'10–±': '101', "10–≥": "102", '10—Ñ': '103', '11–±': '111', '11—Å': '112', '11—Ñ': '113'}
    usersmessage = message.text
    if usersmessage in class_list:
        usersmessage = list1[usersmessage]
    await state.update_data(clas=usersmessage)
    await state.clear()
    msg = int(usersmessage)
    edit_student_clas(message.from_user.id, msg)
    switch_student_teasher_false(message.from_user.id)
    await message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                         reply_markup=kb.get_startkeyboard())
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                         "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                         "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                         reply_markup=kb.uinb(), parse_mode="MarkdownV2")


@router.message(ClassWait.uch)
async def uch(message: Message, state: FSMContext):
    usersmessage = message.text
    msg = int(usersmessage)
    edit_student_clas(message.from_user.id, msg)
    switch_student_teasher_true(message.from_user.id)
    await state.update_data(uch=usersmessage)
    await state.clear()
    await message.answer("""–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –æ—Å–æ–±–æ–º –º–µ–Ω—é.""",
                         reply_markup=kb.get_startkeyboard())
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\."
                         "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –û–°–û–ë–û–ú –ú–ï–ù–Æ\."
                         "\n[–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π](tg://resolve?domain=agosset15bot)",
                         reply_markup=kb.uinb(), parse_mode="MarkdownV2")


@router.message(Edit.eday)
async def textadd(message: Message, state: FSMContext):
    usersmessage = float(message.text)
    await state.update_data(eday=usersmessage)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    await state.set_state(Edit.etext)


@router.message(KabWait.kab)
async def take_kab(message: Message, state: FSMContext):
    usersmessage = int(message.text)
    value = []
    for i in range(1, 6):
        value.append('\n'.join(ast.literal_eval(get_kab_schedule(usersmessage, i))))
    await message.answer(f"<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>\n{value[0]}\n\n<b>–í—Ç–æ—Ä–Ω–∏–∫:</b>\n{value[1]}"
                         f"\n\n<b>–°—Ä–µ–¥–∞:</b>\n{value[2]}\n\n<b>–ß–µ—Ç–≤–µ—Ä–≥:</b>\n{value[3]}"
                         f"\n\n<b>–ü—è—Ç–Ω–∏—Ü–∞:</b>\n{value[4]}",
                         reply_markup=kb.get_startkeyboard(), parse_mode='HTML')
    await state.clear()


@router.message(Admad.ad)
async def getcount(message: Message, state: FSMContext):
    ad = message.text
    await state.update_data(ad=ad)
    await state.clear()
    userbase = get_all_students()
    if len(userbase) > 1:
        for z in userbase:
            try:
                await bot.send_message(z.id, f"–í–Ω–∏–º–∞–Ω–∏–µ!\n{ad}")
            except TelegramBadRequest or TelegramForbiddenError or TelegramNotFound:
                update_student_blocked(z.id)
                pass
    else:
        await bot.send_message(userbase[0].id, f"–í–Ω–∏–º–∞–Ω–∏–µ!\n{ad}")
    await bot.send_message(message.chat.id, 'Done!')


@router.message(AdminAdd.id)
async def admin_pswd_set(message: Message, state: FSMContext):
    await state.clear()
    switch_student_admin(int(message.text))
    await message.answer("Done!", reply_markup=kb.get_startkeyboard())


@router.message(F.document, ExelWait.file)
async def admin_file(message: Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    name = f"{message.document.file_id}.xlsx"
    dest = f"{prj_dir}/tg_bot/xl_uploads/{name}"
    await state.update_data(file=name)
    delete_schedules()
    d = message.document
    await bot.download(file=d, destination=dest)
    await message.answer("–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏."
                         "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª–∞—Å—Å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á–∏—Å–ª–æ1,"
                         "—á–∏—Å–ª–æ2")
    await state.set_state(ExelWait.rasp)


@router.message(ExelWait.file)
async def admin_file(message: Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@router.message(ExelWait.rasp)
async def admin_rasp(message: Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    usersmessage = message.text.split(',')
    data = await state.get_data()
    xl = Exel(data['file'], prj_dir)
    xl.rasp(int(usersmessage[0]), int(usersmessage[1]))
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª–µ–π, –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∏—Ç–µ–ª—å—Å–∫–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, "
                         "–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,—á–∏—Å–ª–æ1,—á–∏—Å–ª–æ2")
    await state.set_state(ExelWait.tchr)


@router.message(ExelWait.tchr)
async def admin_rasp(message: Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    usersmessage = message.text.split(',')
    data = await state.get_data()
    xl = Exel(data['file'], prj_dir)
    xl.tchr_rasp(int(usersmessage[0]), int(usersmessage[1]), int(usersmessage[2]))
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º, "
                         "–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,—á–∏—Å–ª–æ1,—á–∏—Å–ª–æ2")
    await state.set_state(ExelWait.kabs)


@router.message(ExelWait.kabs)
async def admin_kab(message: Message, state: FSMContext):
    prj_dir = os.path.abspath(os.path.curdir)
    usersmessage = message.text.split(',')
    data = await state.get_data()
    xl = Exel(data['file'], prj_dir)
    xl.kab(int(usersmessage[0]), int(usersmessage[1]), int(usersmessage[2]))
    await message.answer("–ì–æ—Ç–æ–≤–æ!\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É,–∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –±–æ—Ç–∞.")
    await state.clear()


@router.message(F.photo, PhotoAdd.kabs)
async def photoadd_kabs(message: Message, state: FSMContext):
    print(message.photo[-1].file_id)
    await state.update_data(kabs=message.photo[-1].file_id)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ tchrs")
    await state.set_state(PhotoAdd.tchrs)


@router.message(F.photo, PhotoAdd.tchrs)
async def photoadd_tchrs(message: Message, state: FSMContext):
    print(message.photo[-1].file_id)
    await state.update_data(tchrs=message.photo[-1].file_id)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ year")
    await state.set_state(PhotoAdd.year)


@router.message(F.photo, PhotoAdd.year)
async def photoadd_year(message: Message, state: FSMContext):
    print(message.photo[-1].file_id)
    data = await state.get_data()
    a = [data['kabs'], data['tchrs'], message.photo[-1].file_id]
    await id_ad(a)
    await message.answer("–ü–æ–ª—É—á–∏–ª–æ—Å—å!")
    await state.clear()


@router.message(DelUser.id)
async def deluser_id(message: Message, state: FSMContext):
    delete_student(int(message.text))
    await message.answer("–ü–æ–ª—É—á–∏–ª–æ—Å—å!", reply_markup=kb.uinb())
    await state.clear()


@router.message(AddNS.login)
async def add_ns_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
    await state.set_state(AddNS.password)


@router.message(AddNS.password)
async def add_ns_login(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_student_login(message.from_user.id, data['login'])
    edit_student_password(message.from_user.id, message.text)
    switch_student_ns(message.from_user.id)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ), "
                         "–∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö.", reply_markup=kb.uinb())
    await state.clear()


@router.callback_query(GetNS.day)
async def get_ns_day(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    start = await state.get_data()
    start = start['start']
    start = datetime.strptime(start, '%d.%m.%Y')
    if call.data in ["back_week", "next_week", "back"]:
        if call.data == "back":
            await state.clear()
            await call.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.uinb())
            await call.answer()
        else:
            if call.data == "back_week":
                start = start - timedelta(days=7)
            else:
                start = start + timedelta(days=7)
            end = start + timedelta(days=6)
            start = start.strftime('%d.%m.%Y')
            end = end.strftime('%d.%m.%Y')
            await call.message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {start} - {end}",
                                      reply_markup=kb.make_ns())
            await state.update_data(start=start)
            await call.answer()
    else:
        usersmessage = int(call.data)
        await state.update_data(day=usersmessage)
        l_p = get_student_by_telegram_id(call.from_user.id)
        try:
            await ns.login(l_p.login, l_p.password, '–°–≤—è—Ç–æ-–î–∏–º–∏—Ç—Ä–∏–µ–≤—Å–∫–∞—è —à–∫–æ–ª–∞')
            diary = await ns.diary(start=start)
            await ns.logout()
            await ns.logout()
            await ns.logout()
            day = diary.schedule[usersmessage]
        except SchoolNotFoundError or AuthError:
            await ns.logout()
            await state.clear()
            await call.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
            return
        lesson = day.lessons
        message_text = []
        for less in lesson:
            assig = less.assignments
            if assig:
                for i in assig:
                    if i.mark is None:
                        if i.is_duty is True:
                            message_text.append(
                                f"‚ö†Ô∏è–î–û–õ–ì!\n{html.bold(i.type)}({less.subject})\n{i.content}")
                        else:
                            message_text.append(f"{html.bold(i.type)}({less.subject})\n{i.content}")
                    else:
                        message_text.append(
                            f"{html.bold(i.type)}({less.subject})\n{i.content} -- {html.bold(i.mark)}")
            else:
                message_text.append(f"{html.bold(less.subject)}\n–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
        msg = "\n\n".join(message_text)
        if len(msg) > 4096:
            for x in range(0, len(msg), 4096):
                await call.message.answer(msg[x:x + 4096], parse_mode='HTML', reply_markup=kb.get_startkeyboard())
        else:
            await call.message.answer(msg, parse_mode='HTML', reply_markup=kb.get_startkeyboard())
        await call.message.answer("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ "
                                  "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö", reply_markup=kb.uinb())
        await state.clear()


@router.callback_query(EditHomework.lesson)
async def edit_homework_lesson(call: CallbackQuery, state: FSMContext):
    await state.update_data(lesson=call.data)
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –î–ó")
    await state.set_state(EditHomework.homework)


@router.message(EditHomework.homework)
async def edit_homework_text(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    usr = get_student_by_telegram_id(message.from_user.id)
    if get_homework(data['lesson'], usr.clas, data['day']) is not None:
        edit_homework(data['day'], data['lesson'], usr.clas, message.text)
        edit_homework_upd_date(data['day'], data['lesson'], usr.clas, str(datetime.now().strftime('%H:%M %d.%m.%Y')))
    else:
        create_homework(data['day'], data['lesson'], usr.clas, message.text,
                        str(datetime.now().strftime('%H:%M %d.%m.%Y')))
    await message.answer("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=kb.get_startkeyboard())
